"Name"     = 'Rage'
"Author"   = 'Schukin G.'
"Version"  = '1.1'
"About"    = 'Rage language grammar'

"Case Sensitive" = True
"Start Symbol" = <Program>

! -------------------------------------------------------------------
! Terminals
! -------------------------------------------------------------------

!{Hex Digit}      = {Digit} + [abcdefABCDEF]
!{Oct Digit}      = [01234567]

{Id Head}         = {Letter} + [_]
{Id Tail}         = {Id Head} + {Digit}
{Id Full}         = {Id Tail} + [.]

{String Ch}       = {Printable} - ["]
{Char Ch}         = {Printable} - ['']

DecLiteral        = [123456789]{Digit}* | [0]
!OctLiteral       = 0{Oct Digit}*
!HexLiteral       = 0x{Hex Digit}+
FloatLiteral      = {Digit}*'.'{Digit}+

!StringLiteral    = '"'( {String Ch} | '\'{Printable} )* '"'
!CharLiteral      = '' ( {Char Ch} | '\'{Printable} )''

Id                = {Id Head}{Id Tail}*
FullId            = ({Id Head}{Id Tail}*'.')+{Id Head}{Id Tail}*

CodeString        = '{' {Printable}* '}'

! -------------------------------------------------------------------
! Comments
! -------------------------------------------------------------------

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

! {Non Slash}     = {Printable} - [/]
! {Non Asterisk}  = {Printable} - [*]
!
! Whitespace     = {Whitespace}+
!                | '/*' (  {Non Asterisk} | '*' {Non Slash}? )*  '*/'


! -------------------------------------------------------------------
! Rules
! -------------------------------------------------------------------
<Program> ::= <Decl list>

<Decl list> ::= <Decl> <Decl list> | <Decl>

<Decl> ::= <Package decl>
           | <Use decl>
           | <Code decl>

<Package decl> ::= package Id
<Use decl> ::= use Id

<Code decl> ::= <Atomic code decl>
                | <Struct code decl>

<Atomic code decl> ::= atomic Id '(' <Arg list> ')' CodeString

<Struct code decl> ::= <Arg list> func Id '(' <Arg list> ')' <Statement>

<Arg list> ::= <Arg> ',' <Arg list>
               | <Arg> |

<Arg> ::= '@' Id

<Statement> ::= if '(' <Expr> ')' <Statement>
                | if '(' <Expr> ')' <Then statement> else <Statement>
                | while '(' <Expr> ')' <Statement>
                | <Order> for '(' Id '=' <Range expr> ')' <Statement>
                | reduce
                | <Normal statement>

<Then Statement> ::= if '(' <Expr> ')' <Then statement> else <Then statement>
                     | while '(' <Expr> ')' <Then statement>
                     | <Order> for '(' Id '=' <Range expr> ')' <Then statement>
                     | reduce
                     | <Normal statement>

<Normal statement> ::= <Block statement>
                       | <Expr list> '=' <Expr list> ';'
                       | <Expr list> ';'
                       | ';'             !Null statement
               
<Block statement> ::= <Order> '{' <Statement list> '}'

<Statement list> ::= <Statement> <Statement list> |
            	
<Range expr> ::= <Expr> '..' <Expr>
                 | <Expr> '..' <Expr> ':' <Expr>

<Data> ::= Id | Id '[' <Expr list> ']'
!           | Id '[' <Array slice> ']'

<Order> ::= par | seq |

!<Array slice> ::= <Expr> ':' <Expr> ':' <Expr>
!              | <Expr> ':' <Expr>
!              | ':' <Expr> ':' <Expr>
!              | ':' <Expr>
!              | ':' ':' <Expr>

!<Data type> ::= Id | Id '[' <Expr> ']' | Id '[' ']'
!<Data decl> ::= <Data type> <Data>

! -------------------------------------------------------------------
! Expressions
! -------------------------------------------------------------------

<Expr> ::= <Op or>

<Op or>      ::= <Op or> '||' <Op and>
                 | <Op and>

<Op and>     ::= <Op and> '&&' <Op equate>
                 | <Op equate>

<Op equate>  ::= <Op equate> '==' <Op compare>
                 | <Op equate> '!=' <Op compare>
                 | <Op compare>

<Op compare> ::= <Op compare> '<'  <Op add>
                 | <Op compare> '>'  <Op add>
                 | <Op compare> '<=' <Op add>
                 | <Op compare> '>=' <Op add>
                 | <Op add>

<Op add>     ::= <Op add> '+' <Op mult>
                 | <Op add> '-' <Op mult>
                 | <Op mult>

<Op mult>    ::= <Op mult> '*' <Op unary>
                 | <Op mult> '/' <Op unary>
                 | <Op mult> '%' <Op unary>
                 | <Op unary>

<Op unary>   ::= '!' <Op unary>
                 | '-' <Op unary>
                 | <Value>

<Value>      ::= DecLiteral                  ! integer number
                 | FloatLiteral              ! float number
                 | <Data>                    ! access to var
                 | Id '(' <Expr list> ')'    ! function call with args
                 | Id '(' ')'                ! function call without args
                 | '(' <Expr> ')'            ! expr in parentneses
                 | '[' <Expr list> ']'       ! list/array
                 | '[' ']'                   ! empty list/array
              
<Expr list> ::= <Expr>
                | <Expr> ',' <Expr list>


